// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl", "debian-openssl-1.1.x", "linux-musl-openssl-3.0.x"]
  engineType    = "binary"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "yarn zod-prisma-types"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?      @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  password      String?
  userTemplate  UserTemplate[]
  comment       Comment[]
  PasswordReset PasswordReset?
}

model Comment {
  id                String    @id @default(cuid())
  comment           String?   @db.Text
  user              User?     @relation(fields: [userId], references: [id])
  userId            String?
  children          Comment[] @relation("CommentToComments")
  parent_comment    Comment?  @relation("CommentToComments", fields: [parent_comment_id], references: [id])
  parent_comment_id String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  x                 Float
  y                 Float
}

model UserTemplate {
  id          String    @id @default(cuid())
  userId      String    @map("user_id")
  template_id String
  is_owner    Boolean   @default(false)
  is_favorite Boolean   @default(false)
  can_edit    Boolean   @default(false)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_ad  DateTime?
  template    Template  @relation(fields: [template_id], references: [id], onDelete: Cascade)
  User        User      @relation(fields: [userId], references: [id])
}

model Template {
  id           String         @id @default(cuid())
  root_note_id String         @default(cuid())
  name         String
  image_url    String?        @db.Text
  public_url   String?        @db.Text
  created_at   DateTime       @default(now())
  updated_at   DateTime       @updatedAt
  deleted_at   DateTime
  userTemplate UserTemplate[]
  node         Node[]
  SpeechBallon SpeechBallon[]
}

model Node {
  id             String         @id @default(cuid())
  slug           String         @db.Text
  input_title    String         @db.Text
  input_value    String         @db.Text
  is_formula     Boolean        @default(false)
  value2number   String         @map("value_2_number")
  style          Json
  x              Float
  y              Float
  unit           String
  Template       Template?      @relation(fields: [templateId], references: [id])
  templateId     String         @map("template_id")
  children       Node[]         @relation("nodetonodes")
  parent_node    Node           @relation("nodetonodes", fields: [parent_node_id], references: [id])
  parent_node_id String
  SpeechBallon   SpeechBallon[]
}

model SpeechBallon {
  id         String   @id @default(cuid())
  templateId String   @map("template_id")
  node_id    String
  text       String
  x          Float
  y          Float
  shape      String
  style      Json
  stroke     Json
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Template   Template @relation(fields: [templateId], references: [id])
  Node       Node     @relation(fields: [node_id], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordReset {
  id         Int      @id @default(autoincrement())
  user_id    String   @unique
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, token])
}
